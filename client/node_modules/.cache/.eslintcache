[{"C:\\PC\\Desktop\\chat-app-master\\Chat App\\client\\src\\index.js":"1","C:\\PC\\Desktop\\chat-app-master\\Chat App\\client\\src\\App.js":"2","C:\\PC\\Desktop\\chat-app-master\\Chat App\\client\\src\\reportWebVitals.js":"3","C:\\PC\\Desktop\\chat-app-master\\Chat App\\client\\src\\modules\\Form\\index.js":"4","C:\\PC\\Desktop\\chat-app-master\\Chat App\\client\\src\\modules\\Dashboard\\index.js":"5","C:\\PC\\Desktop\\chat-app-master\\Chat App\\client\\src\\components\\Button\\index.js":"6","C:\\PC\\Desktop\\chat-app-master\\Chat App\\client\\src\\components\\Input\\index.js":"7"},{"size":584,"mtime":1719405814216,"results":"8","hashOfConfig":"9"},{"size":1049,"mtime":1719405814126,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1719405814275,"results":"11","hashOfConfig":"9"},{"size":2782,"mtime":1719405814635,"results":"12","hashOfConfig":"9"},{"size":8315,"mtime":1719405814598,"results":"13","hashOfConfig":"9"},{"size":411,"mtime":1719405814523,"results":"14","hashOfConfig":"9"},{"size":695,"mtime":1719405814557,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vjna76",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\PC\\Desktop\\chat-app-master\\Chat App\\client\\src\\index.js",[],[],"C:\\PC\\Desktop\\chat-app-master\\Chat App\\client\\src\\App.js",[],[],"C:\\PC\\Desktop\\chat-app-master\\Chat App\\client\\src\\reportWebVitals.js",[],[],"C:\\PC\\Desktop\\chat-app-master\\Chat App\\client\\src\\modules\\Form\\index.js",[],[],"C:\\PC\\Desktop\\chat-app-master\\Chat App\\client\\src\\modules\\Dashboard\\index.js",["38","39","40","41","42","43","44","45"],[],"import { useEffect, useRef, useState } from 'react'\nimport Img1 from '../../assets/img1.jpg'\nimport tutorialsdev from '../../assets/tutorialsdev.png'\nimport Input from '../../components/Input'\nimport { io } from 'socket.io-client'\n\nconst Dashboard = () => {\n\tconst [user, setUser] = useState(JSON.parse(localStorage.getItem('user:detail')))\n\tconst [conversations, setConversations] = useState([])\n\tconst [messages, setMessages] = useState({})\n\tconst [message, setMessage] = useState('')\n\tconst [users, setUsers] = useState([])\n\tconst [socket, setSocket] = useState(null)\n\tconst messageRef = useRef(null)\n\n\tuseEffect(() => {\n\t\tsetSocket(io('http://localhost:8080'))\n\t}, [])\n\n\tuseEffect(() => {\n\t\tsocket?.emit('addUser', user?.id);\n\t\tsocket?.on('getUsers', users => {\n\t\t\tconsole.log('activeUsers :>> ', users);\n\t\t})\n\t\tsocket?.on('getMessage', data => {\n\t\t\tsetMessages(prev => ({\n\t\t\t\t...prev,\n\t\t\t\tmessages: [...prev.messages, { user: data.user, message: data.message }]\n\t\t\t}))\n\t\t})\n\t}, [socket])\n\n\tuseEffect(() => {\n\t\tmessageRef?.current?.scrollIntoView({ behavior: 'smooth' })\n\t}, [messages?.messages])\n\n\tuseEffect(() => {\n\t\tconst loggedInUser = JSON.parse(localStorage.getItem('user:detail'))\n\t\tconst fetchConversations = async () => {\n\t\t\tconst res = await fetch(`http://localhost:8000/api/conversations/${loggedInUser?.id}`, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst resData = await res.json()\n\t\t\tsetConversations(resData)\n\t\t}\n\t\tfetchConversations()\n\t}, [])\n\n\tuseEffect(() => {\n\t\tconst fetchUsers = async () => {\n\t\t\tconst res = await fetch(`http://localhost:8000/api/users/${user?.id}`, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst resData = await res.json()\n\t\t\tsetUsers(resData)\n\t\t}\n\t\tfetchUsers()\n\t}, [])\n\n\tconst fetchMessages = async (conversationId, receiver) => {\n\t\tconst res = await fetch(`http://localhost:8000/api/message/${conversationId}?senderId=${user?.id}&&receiverId=${receiver?.receiverId}`, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t}\n\t\t});\n\t\tconst resData = await res.json()\n\t\tsetMessages({ messages: resData, receiver, conversationId })\n\t}\n\n\tconst sendMessage = async (e) => {\n\t\tsetMessage('')\n\t\tsocket?.emit('sendMessage', {\n\t\t\tsenderId: user?.id,\n\t\t\treceiverId: messages?.receiver?.receiverId,\n\t\t\tmessage,\n\t\t\tconversationId: messages?.conversationId\n\t\t});\n\t\tconst res = await fetch(`http://localhost:8000/api/message`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tconversationId: messages?.conversationId,\n\t\t\t\tsenderId: user?.id,\n\t\t\t\tmessage,\n\t\t\t\treceiverId: messages?.receiver?.receiverId\n\t\t\t})\n\t\t});\n\t}\n\n\treturn (\n\t\t<div className='w-screen flex'>\n\t\t\t<div className='w-[25%] h-screen bg-secondary overflow-scroll'>\n\t\t\t\t<div className='flex items-center my-8 mx-14'>\n\t\t\t\t\t<div><img src={tutorialsdev} width={75} height={75} className='border border-primary p-[2px] rounded-full' /></div>\n\t\t\t\t\t<div className='ml-8'>\n\t\t\t\t\t\t<h3 className='text-2xl'>{user?.fullName}</h3>\n\t\t\t\t\t\t<p className='text-lg font-light'>My Account</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<hr />\n\t\t\t\t<div className='mx-14 mt-10'>\n\t\t\t\t\t<div className='text-primary text-lg'>Messages</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconversations.length > 0 ?\n\t\t\t\t\t\t\t\tconversations.map(({ conversationId, user }) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<div className='flex items-center py-8 border-b border-b-gray-300'>\n\t\t\t\t\t\t\t\t\t\t\t<div className='cursor-pointer flex items-center' onClick={() => fetchMessages(conversationId, user)}>\n\t\t\t\t\t\t\t\t\t\t\t\t<div><img src={Img1} className=\"w-[60px] h-[60px] rounded-full p-[2px] border border-primary\" /></div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className='ml-6'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h3 className='text-lg font-semibold'>{user?.fullName}</h3>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p className='text-sm font-light text-gray-600'>{user?.email}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}) : <div className='text-center text-lg font-semibold mt-24'>No Conversations</div>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='w-[50%] h-screen bg-white flex flex-col items-center'>\n\t\t\t\t{\n\t\t\t\t\tmessages?.receiver?.fullName &&\n\t\t\t\t\t<div className='w-[75%] bg-secondary h-[80px] my-14 rounded-full flex items-center px-14 py-2'>\n\t\t\t\t\t\t<div className='cursor-pointer'><img src={Img1} width={60} height={60} className=\"rounded-full\" /></div>\n\t\t\t\t\t\t<div className='ml-6 mr-auto'>\n\t\t\t\t\t\t\t<h3 className='text-lg'>{messages?.receiver?.fullName}</h3>\n\t\t\t\t\t\t\t<p className='text-sm font-light text-gray-600'>{messages?.receiver?.email}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='cursor-pointer'>\n\t\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-phone-outgoing\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"black\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n\t\t\t\t\t\t\t\t<path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n\t\t\t\t\t\t\t\t<path d=\"M5 4h4l2 5l-2.5 1.5a11 11 0 0 0 5 5l1.5 -2.5l5 2v4a2 2 0 0 1 -2 2a16 16 0 0 1 -15 -15a2 2 0 0 1 2 -2\" />\n\t\t\t\t\t\t\t\t<line x1=\"15\" y1=\"9\" x2=\"20\" y2=\"4\" />\n\t\t\t\t\t\t\t\t<polyline points=\"16 4 20 4 20 8\" />\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t<div className='h-[75%] w-full overflow-scroll shadow-sm'>\n\t\t\t\t\t<div className='p-14'>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmessages?.messages?.length > 0 ?\n\t\t\t\t\t\t\t\tmessages.messages.map(({ message, user: { id } = {} }) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<div className={`max-w-[40%] rounded-b-xl p-4 mb-6 ${id === user?.id ? 'bg-primary text-white rounded-tl-xl ml-auto' : 'bg-secondary rounded-tr-xl'} `}>{message}</div>\n\t\t\t\t\t\t\t\t\t\t<div ref={messageRef}></div>\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}) : <div className='text-center text-lg font-semibold mt-24'>No Messages or No Conversation Selected</div>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\tmessages?.receiver?.fullName &&\n\t\t\t\t\t<div className='p-14 w-full flex items-center'>\n\t\t\t\t\t\t<Input placeholder='Type a message...' value={message} onChange={(e) => setMessage(e.target.value)} className='w-[75%]' inputClassName='p-4 border-0 shadow-md rounded-full bg-light focus:ring-0 focus:border-0 outline-none' />\n\t\t\t\t\t\t<div className={`ml-4 p-2 cursor-pointer bg-light rounded-full ${!message && 'pointer-events-none'}`} onClick={() => sendMessage()}>\n\t\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-send\" width=\"30\" height=\"30\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#2c3e50\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n\t\t\t\t\t\t\t\t<path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n\t\t\t\t\t\t\t\t<line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\" />\n\t\t\t\t\t\t\t\t<path d=\"M21 3l-6.5 18a0.55 .55 0 0 1 -1 0l-3.5 -7l-7 -3.5a0.55 .55 0 0 1 0 -1l18 -6.5\" />\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className={`ml-4 p-2 cursor-pointer bg-light rounded-full ${!message && 'pointer-events-none'}`}>\n\t\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-circle-plus\" width=\"30\" height=\"30\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#2c3e50\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n\t\t\t\t\t\t\t\t<path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n\t\t\t\t\t\t\t\t<circle cx=\"12\" cy=\"12\" r=\"9\" />\n\t\t\t\t\t\t\t\t<line x1=\"9\" y1=\"12\" x2=\"15\" y2=\"12\" />\n\t\t\t\t\t\t\t\t<line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"15\" />\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t\t<div className='w-[25%] h-screen bg-light px-8 py-16 overflow-scroll'>\n\t\t\t\t<div className='text-primary text-lg'>People</div>\n\t\t\t\t<div>\n\t\t\t\t\t{\n\t\t\t\t\t\tusers.length > 0 ?\n\t\t\t\t\t\t\tusers.map(({ userId, user }) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div className='flex items-center py-8 border-b border-b-gray-300'>\n\t\t\t\t\t\t\t\t\t\t<div className='cursor-pointer flex items-center' onClick={() => fetchMessages('new', user)}>\n\t\t\t\t\t\t\t\t\t\t\t<div><img src={Img1} className=\"w-[60px] h-[60px] rounded-full p-[2px] border border-primary\" /></div>\n\t\t\t\t\t\t\t\t\t\t\t<div className='ml-6'>\n\t\t\t\t\t\t\t\t\t\t\t\t<h3 className='text-lg font-semibold'>{user?.fullName}</h3>\n\t\t\t\t\t\t\t\t\t\t\t\t<p className='text-sm font-light text-gray-600'>{user?.email}</p>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}) : <div className='text-center text-lg font-semibold mt-24'>No Conversations</div>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Dashboard","C:\\PC\\Desktop\\chat-app-master\\Chat App\\client\\src\\components\\Button\\index.js",[],[],"C:\\PC\\Desktop\\chat-app-master\\Chat App\\client\\src\\components\\Input\\index.js",[],[],{"ruleId":"46","severity":1,"message":"47","line":8,"column":15,"nodeType":"48","messageId":"49","endLine":8,"endColumn":22},{"ruleId":"50","severity":1,"message":"51","line":31,"column":5,"nodeType":"52","endLine":31,"endColumn":13,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"51","line":64,"column":5,"nodeType":"52","endLine":64,"endColumn":7,"suggestions":"54"},{"ruleId":"46","severity":1,"message":"55","line":85,"column":9,"nodeType":"48","messageId":"49","endLine":85,"endColumn":12},{"ruleId":"56","severity":1,"message":"57","line":103,"column":11,"nodeType":"58","endLine":103,"endColumn":115},{"ruleId":"56","severity":1,"message":"57","line":119,"column":18,"nodeType":"58","endLine":119,"endColumn":109},{"ruleId":"56","severity":1,"message":"57","line":136,"column":39,"nodeType":"58","endLine":136,"endColumn":105},{"ruleId":"56","severity":1,"message":"57","line":197,"column":17,"nodeType":"58","endLine":197,"endColumn":108},"no-unused-vars","'setUser' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user?.id'. Either include it or remove the dependency array.","ArrayExpression",["59"],["60"],"'res' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"61","fix":"62"},{"desc":"63","fix":"64"},"Update the dependencies array to be: [socket, user?.id]",{"range":"65","text":"66"},"Update the dependencies array to be: [user?.id]",{"range":"67","text":"68"},[983,991],"[socket, user?.id]",[1814,1816],"[user?.id]"]